////
/// @icons
////
$input-color: #496070 !default;
$input-placeholder-color: #849bab !default;
$input-font-family: inherit !default;
$input-font-size: 14px !default;
$input-background: #f6fbff !default;
$input-background-hover: #f6fbff !default;
$input-background-focus: $white !default;
$input-background-disabled: #f9fbfd !default;
$input-border: 1px solid #6d93aa !default;
$input-border-hover: 1px solid #2ca1e9 !default;
$input-border-focus: 1px solid $dark-gray !default;
$input-border-disabled: 1px solid #c5d4dd !default;
$input-cursor-disabled: default !default;
$input-transition: box-shadow 0.5s, border-color 0.25s ease-in-out !default;
$input-number-spinners: true !default;
$input-radius: $global-radius !default;
$form-spacing: 14px !default;

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function has-value($val) {
  @if $val == null or $val == none {
    @return false;
  }
  @if type-of($val) == 'number' and strip-unit($val) == 0 {
    @return false;
  }
  @if type-of($val) == 'list' and length($val) == 0 {
    @return false;
  }
  @return true;
}


@function text-inputs($types: ()) {
  $return: ();

  $all-types:
  text
  password
  date
  datetime
  datetime-local
  month
  week
  email
  number
  search
  tel
  time
  url
  color;

  @if not has-value($types) {
     $types: $all-types;
   }

  @each $type in $types {
    $return: append($return, unquote('[type=\'#{$type}\']'), comma);
  }

  @return $return;
}


@mixin form-element {
  $height: ($input-font-size + ($form-spacing * 1.3));

  display: block;
  box-sizing: border-box;
  width: 100%;
  height: $height;
  padding: $form-spacing / 2 $form-spacing * 1;
  border: $input-border;
  margin: 0 0 $form-spacing;
  font-weight: $global-weight-bold;
  font-family: $input-font-family;
  font-size: $input-font-size;
  color: $input-color;
  background-color: $input-background;
  border-radius: $input-radius;
  &::-webkit-input-placeholder {color:$input-placeholder-color;}
  &:-moz-placeholder,
  &:-moz-placeholder {color:$input-placeholder-color;}

  @if has-value($input-transition) {
    transition: $input-transition;
  }

  &:hover {
    border: $input-border-hover;
    background-color: $input-background-hover;
    outline: none;

    @if has-value($input-transition) {
      transition: $input-transition;
    }
  }

  &:focus {
    border: $input-border-focus;
    background-color: $input-background-focus;
    outline: none;

    @if has-value($input-transition) {
      transition: $input-transition;
    }
  }
}

@mixin form-text {
  #{text-inputs()},
  textarea {
    @include form-element;
    -webkit-appearance: none;
    -moz-appearance: none;
  }

  // Text areas
  textarea {
    max-width: 100%;

    &[rows] {
      height: auto;
    }
  }

  input,
  textarea {
    &:disabled,
    &[readonly] {
      background-color: $input-background-disabled;
      border: $input-border-disabled;
      cursor: $input-cursor-disabled;
      pointer-events: none;
    }
  }

  [type='submit'],
  [type='button'] {
    border-radius: $global-radius;
    -webkit-appearance: none;
    -moz-appearance: none;
  }

  input[type='search'] {
    box-sizing: border-box;
  }

  [type='number'] {
    @if not $input-number-spinners {
      -moz-appearance: textfield;
      [type='number']::-webkit-inner-spin-button,
      [type='number']::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
    }
  }
}

@include form-text;